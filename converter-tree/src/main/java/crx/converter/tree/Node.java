/*******************************************************************************
 * Copyright (C) 2015 Cyprotex Discovery Ltd - All rights reserved.
 ******************************************************************************/

package crx.converter.tree;

/**
 * Node in a binary tree.
 */
public class Node {
	/**
	 * Get the class name of an object.
	 * @param o Instance Variable
	 * @return java.lang.String
	 */
	private static String getClassName(Object o) {
		if (o == null) return null;
		
		Class<?> c = o.getClass();
		String FQClassName = c.getName();
		int firstChar;
		firstChar = FQClassName.lastIndexOf ('.') + 1;
		if ( firstChar > 0 ) {
			FQClassName = FQClassName.substring ( firstChar );
		}
		return FQClassName;
	}
	
	/**
	 * Get the class name of an object.
	 * @param o
	 * @return java.lang.String
	 */
	public static String getPackageName(Object o) {
		if (o == null) return "null";
		
		Class<?> c = o.getClass();
		String fullyQualifiedName = c.getName();
		int lastDot = fullyQualifiedName.lastIndexOf ('.');
		if (lastDot==-1){ return ""; }
		return fullyQualifiedName.substring (0, lastDot);
	}
	
	/**
	 * Left-hand element.
	 */
	public Node left;
	
	/**
	 * Right-hand element
	 */
	public Node right;
	
	/**
	 * Model data bound to the node.
	 */
	public Object data;
	
	/**
	 * Flag if a root node in a tree.
	 */
	public boolean root = false;
	
	/**
	 * Parent node in a binary tree.
	 */
	public Node parent = null;
	
	/**
	 * Code Statement generated by parsing a node contents.
	 */
	public String stmt = null;
	
	private static int counter = 0;
	
	/**
	 * Node index across the entire converter
	 */
	protected int idx = 0;
	
	/**
	 * Flags node is a piecewise statement.
	 */
	public boolean isPiecewise = false;
	
	/**
	 * Reset the node index counter.
	 */
	public static void resetCounter() {
		counter = 0;
	}
	
	public Node(Object _data) {
		if (_data == null) throw new NullPointerException("Binary tree node cannot contain null data.");
		data = _data;
		idx = counter++;
	}
	
	public Node(Object _data, Node _parent) {
		if (_data == null || _parent == null) throw new NullPointerException("Binary tree node cannot contain null data.");
		data = _data;
		parent = _parent;
		idx = counter++;
	}
	
	@Override
	public String toString() {		
		StringBuffer sb = new StringBuffer();
		sb.append("index=");
		sb.append(idx);
		sb.append(",parent=");
		if (parent != null) sb.append(getClassName(parent.data));
		sb.append(",data=");
		sb.append(data);
		sb.append(",dataClass=");
		if (data != null) sb.append(getClassName(data));
		sb.append(",stmt=");
		if (stmt != null) sb.append(stmt);
		sb.append(",dataPackage=");
		sb.append(getPackageName(data));
		return sb.toString();
	}
}